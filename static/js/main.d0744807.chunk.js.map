{"version":3,"sources":["components/editor/Editor.js","components/preview/Preview.js","assets/images/logo.webp","components/toolbar/Toolbar.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","onMarkdownInput","placeholder","className","id","rows","value","onChange","e","target","Preview","body","size","marked","setOptions","gfm","breaks","use","renderer","heading","text","level","escapedText","toLowerCase","replace","border","blockquote","code","infostring","escaped","codespan","table","header","dangerouslySetInnerHTML","__html","Toolbar","title","maximized","onClickMaximized","classes","src","Logo","alt","onClick","App","useState","markdown","setMarkdown","editorMaximized","setEditorMaximized","previewMaximized","setPreviewMaximized","style","transition","setTimeout","handleEditorMaximized","handleMarkdownInput","handlePreviewMaximized","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0744807.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Editor.css\";\r\n\r\nconst Editor = ({ onMarkdownInput, placeholder }) => {\r\n  const handleChange = (e) => {\r\n    onMarkdownInput(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"editor-wrapper\">\r\n      <div className=\"shadow-lg mb-3\">\r\n        <textarea\r\n          className=\"form-control text-input\"\r\n          id=\"editor\"\r\n          rows=\"20\"\r\n          value={placeholder}\r\n          onChange={handleChange}\r\n        ></textarea>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\nimport marked from \"marked\";\r\n// import Prism from \"prismjs\";\r\nimport \"./Preview.css\";\r\nimport \"prismjs/themes/prism-tomorrow.css\";\r\n\r\nconst Preview = ({ body, size }) => {\r\n  marked.setOptions({\r\n    gfm: true,\r\n    breaks: true,\r\n    // highlight: function (code) {\r\n    //   return Prism.highlight(code, Prism.languages.javascript, \"javascript\");\r\n    // },\r\n  });\r\n\r\n  const renderer = {\r\n    heading(text, level) {\r\n      const escapedText = text.toLowerCase().replace(/[^\\w]+/g, \"-\");\r\n      let border = 0;\r\n      switch (level) {\r\n        case 1:\r\n          border = 3;\r\n          break;\r\n        case 2:\r\n          border = 2;\r\n          break;\r\n        case 3:\r\n          border = 1;\r\n          break;\r\n        default:\r\n          border = 0;\r\n          break;\r\n      }\r\n\r\n      return `<h${level} id=\"${escapedText}\" class=\"border-bottom border-secondary border-${border} pb-1\">${text}</h${level}>`;\r\n    },\r\n    blockquote(text) {\r\n      return `<blockquote class=\"border-start border-primary border-3 ps-2 ms-3\"><p>${text}</p></blockquote>\r\n      `;\r\n    },\r\n    code(code, infostring, escaped) {\r\n      return `<pre class=\"language-${infostring}\"><code class=\"language-${infostring}\">${code}</code></pre>`;\r\n      // return Prism.highlight(code, Prism.languages.javascript, \"javascript\");\r\n    },\r\n    codespan(code) {\r\n      return `<code><kbd>${code}</kbd></code>`;\r\n    },\r\n    table(header, body) {\r\n      return `<table class=\"table table-bordered border-info\"><thead>${header}</thead><tbody>${body}</tbody></table>`;\r\n    },\r\n  };\r\n  marked.use({ renderer });\r\n\r\n  return (\r\n    <div\r\n      className={`preview-wrapper ${size} p-2`}\r\n      id=\"preview\"\r\n      dangerouslySetInnerHTML={{ __html: marked(body) }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Preview;\r\n","export default __webpack_public_path__ + \"static/media/logo.b7157719.webp\";","import React from \"react\";\r\nimport Logo from \"../../assets/images/logo.webp\";\r\nimport \"./Toolbar.css\";\r\n\r\nconst Toolbar = ({ title, maximized, onClickMaximized }) => {\r\n  const classes = maximized ? \"bi-arrows-angle-contract\" : \"bi-arrows-fullscreen\";\r\n\r\n  const handleMaximized = () => {\r\n    onClickMaximized(!maximized);\r\n  };\r\n\r\n  return (\r\n    <div className=\"d-flex justify-content-between align-items-center toolbar-wrapper\">\r\n      <div className=\"d-flex align-items-center\">\r\n        <img src={Logo} alt=\"logo\" className=\"logo rounded-circle\" />\r\n        <span className=\"text-white ms-2\">{title}</span>\r\n      </div>\r\n      <i className={`bi ${classes} icon`} title=\"Fullscreen\" onClick={handleMaximized}></i>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Toolbar;\r\n","import { useState } from \"react\";\nimport Editor from \"./components/editor/Editor\";\nimport Preview from \"./components/preview/Preview\";\nimport Toolbar from \"./components/toolbar/Toolbar\";\n\nfunction App() {\n  const [markdown, setMarkdown] = useState(`# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`js\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.org), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n      - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)`);\n  const [editorMaximized, setEditorMaximized] = useState([false, \"\", \"6\"]);\n  const [previewMaximized, setPreviewMaximized] = useState([false, \"\", \"6\", \"\"]);\n\n  const handleEditorMaximized = (value) => {\n    if (!editorMaximized[0]) {\n      setPreviewMaximized([\"\", \"hide\", \"\"]);\n      return setEditorMaximized([value, \"\", \"10\"]);\n    }\n\n    setTimeout(() => {\n      setPreviewMaximized([false, \"\", \"6\"]);\n    }, 1000);\n\n    setEditorMaximized([value, \"\", \"6\"]);\n  };\n\n  const handlePreviewMaximized = (value) => {\n    if (!previewMaximized[0]) {\n      setEditorMaximized([\"\", \"hide\", \"\"]);\n      return setPreviewMaximized([value, \"\", \"10\", \"maximized\"]);\n    }\n\n    setTimeout(() => {\n      setEditorMaximized([false, \"\", \"6\"]);\n    }, 1000);\n\n    setPreviewMaximized([value, \"\", \"6\"]);\n  };\n\n  const handleMarkdownInput = (value) => {\n    setMarkdown(value);\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <div className=\"row justify-content-center\">\n        <div\n          className={`col-md-${editorMaximized[2]} ${editorMaximized[1]}`}\n          style={{ transition: \"width 1s\" }}\n        >\n          <Toolbar\n            title=\"Editor\"\n            maximized={editorMaximized[0]}\n            onClickMaximized={(value) => handleEditorMaximized(value)}\n          />\n          <Editor placeholder={markdown} onMarkdownInput={(value) => handleMarkdownInput(value)} />\n        </div>\n        <div\n          className={`col-md-${previewMaximized[2]} ${previewMaximized[1]}`}\n          style={{ transition: \"width 1s\" }}\n        >\n          <Toolbar\n            title=\"Preview\"\n            maximized={previewMaximized[0]}\n            onClickMaximized={(value) => handlePreviewMaximized(value)}\n          />\n          <Preview size={previewMaximized[3]} body={markdown} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}